name: Bootstrap Terraform

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      # 1️⃣ Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # 3️⃣ Ensure S3 bucket exists with retry
      - name: Ensure Bootstrap Bucket Exists
        id: ensure_bucket
        run: |
          BUCKET_NAME="my-react-node-app-bucket02"
          REGION="us-east-1"

          if aws s3api head-bucket --bucket $BUCKET_NAME 2>/dev/null; then
            echo "Bucket exists"
            echo "bucket_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Bucket does not exist, creating..."
            if [ "$REGION" = "us-east-1" ]; then
              aws s3api create-bucket --bucket $BUCKET_NAME --region $REGION
            else
              aws s3api create-bucket --bucket $BUCKET_NAME --region $REGION --create-bucket-configuration LocationConstraint=$REGION
            fi

            # Enable SSE
            aws s3api put-bucket-encryption \
              --bucket $BUCKET_NAME \
              --server-side-encryption-configuration '{
                "Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]
              }'

            # Retry loop to wait for bucket propagation
            for i in {1..5}; do
              if aws s3api head-bucket --bucket $BUCKET_NAME 2>/dev/null; then
                echo "Bucket is now ready"
                break
              else
                echo "Waiting for bucket creation..."
                sleep 10
              fi
            done

            echo "bucket_exists=false" >> $GITHUB_OUTPUT
          fi

      # 4️⃣ Ensure DynamoDB table exists for locking
      - name: Ensure DynamoDB Table Exists
        run: |
          TABLE_NAME="terraform-locks"
          if aws dynamodb describe-table --table-name $TABLE_NAME 2>/dev/null; then
            echo "DynamoDB table exists"
          else
            echo "Creating DynamoDB table..."
            aws dynamodb create-table \
              --table-name $TABLE_NAME \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
            echo "Waiting for table to become ACTIVE..."
            aws dynamodb wait table-exists --table-name $TABLE_NAME
          fi

      # 5️⃣ Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest  # pinned stable version

      # 6️⃣ Terraform bootstrap (local backend)
      - name: Terraform Init & Apply (Bootstrap)
        working-directory: infra-1/bootstrap
        run: |
          terraform init -backend=false
          terraform validate
          terraform plan
          terraform apply -auto-approve

      # 7️⃣ Confirmation
      - name: Confirm Bootstrap Complete
        run: |
          echo "Bootstrap complete. S3 bucket and DynamoDB table are ready for main Terraform stack."