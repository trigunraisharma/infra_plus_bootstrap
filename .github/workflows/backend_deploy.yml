name: Backend Deploy (ECS/ECR)

on:
  workflow_dispatch:

jobs:
  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # ----------------------------
      # Get ECR Repo URL from SSM
      # ----------------------------
      - name: Set ECR Repo environment variable
        run: |
          ECR_REPO=$(aws ssm get-parameter \
            --name "/my-react-node-app/ecr_repo_url" \
            --query "Parameter.Value" --output text)
          echo "ECR_REPO=$ECR_REPO" >> $GITHUB_ENV
          echo "Logging in to ECR: $ECR_REPO"
          aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REPO


      # ----------------------------
      # Build and Push Docker Image
      # ----------------------------
      - name: Build and Push Docker image
        id: build
        run: |
          IMAGE_TAG=${GITHUB_SHA:0:7}
          docker build -t $ECR_REPO:$IMAGE_TAG .
          docker push $ECR_REPO:$IMAGE_TAG
          # Optionally update 'latest' tag
          docker tag $ECR_REPO:$IMAGE_TAG $ECR_REPO:latest
          docker push $ECR_REPO:latest
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      # ----------------------------
      # Update ECS Service
      # ----------------------------
      - name: Register new ECS task definition and update service
        run: |
          CLUSTER=$(aws ssm get-parameter --name "/my-react-node-app/ecs_cluster" --query "Parameter.Value" --output text)
          SERVICE=$(aws ssm get-parameter --name "/my-react-node-app/ecs_service" --query "Parameter.Value" --output text)

          # Get current task definition ARN
          TASK_DEF_ARN=$(aws ecs describe-services --cluster $CLUSTER --services $SERVICE --query "services[0].taskDefinition" --output text)

          # Get current container definitions
          CONTAINER_DEF=$(aws ecs describe-task-definition --task-definition $TASK_DEF_ARN --query "taskDefinition.containerDefinitions" --output json)

          # Update image to the new Docker image
          UPDATED_CONTAINER_DEF=$(echo $CONTAINER_DEF | jq --arg IMAGE "$ECR_REPO:$IMAGE_TAG" '.[0].image=$IMAGE')

          # Register new task definition
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --family $(aws ecs describe-task-definition --task-definition $TASK_DEF_ARN --query "taskDefinition.family" --output text) \
            --network-mode awsvpc \
            --requires-compatibilities FARGATE \
            --cpu 256 \
            --memory 512 \
            --execution-role-arn arn:aws:iam::203918840508:role/ecs-execution-role \
            --task-role-arn arn:aws:iam::203918840508:role/ecs-task-role \
            --container-definitions "$UPDATED_CONTAINER_DEF" \
            --query "taskDefinition.taskDefinitionArn" --output text)

          # Update ECS service with new task definition
          aws ecs update-service --cluster $CLUSTER --service $SERVICE --force-new-deployment --task-definition $NEW_TASK_DEF_ARN
